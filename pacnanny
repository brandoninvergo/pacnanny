#!/bin/bash
#       pacnanny
#       
#       Copyright Â© 2013 Brandon Invergo <brandon@invergo.net>
#       
#       pacnanny is free software: you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation, either version 3 of the License, or
#       (at your option) any later version.
#
#       pacnanny is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#
#       You should have received a copy of the GNU General Public License
#       along with pacnanny.  If not, see <http://www.gnu.org/licenses/>.


# color: always, never, auto
COLOR=always
BROWSER=w3m
NEWS_URL=https://www.archlinux.org/feeds/news/

SHOW_NEWS=true
WARN_ON_FORCE=true
REPRINT_MESSAGES=true
REPRINT_WARNINGS=true
LIST_PACNEWS=true
LIST_PACSAVES=true
PROMPT_REBOOT=true

pacmanbin="${PACMAN:-pacman}"
[[ -r /etc/pacnanny.conf ]] && source /etc/pacnanny.conf

show_news () {
    if [ $COLOR = "never" ]; then
        printf ":: Checking for Arch Linux news...\n"
    else    
        printf "\e[1;34m::\e[0;1m Checking for Arch Linux news...\e[0m\n"
    fi

    last_update=$(date -d "`grep 'pacman -Syu' /var/log/pacman.log | \
                            tail -n1 | grep -o '[-0-9\]* [:0-9]*'`" '+%s')
    news=./arch_news.rss
    wget --quiet $NEWS_URL -O $news
    sed -i -e 's|<lastBuildDate>.*</lastBuildDate>||g' $news
    article_dates=`grep -o -E "[0-9]+ [A-Za-z]+ [0-9]+ [0-9:]+" $news`

    local IFS=$'\n'
    # reformat the RSS so that each item is on its own line
    items=`cat $news | tr -d '\n' | sed -e 's|<item>|\n<item>|g'`
    while IFS= read -r d; do
        # get the article's date in seconds since 1970
        art_date=`date -d "$d" '+%s'`
        # if it's new, show it
        if [[ $art_date -gt $last_update ]]; then
            URL=`sed -e "/lastBuildDate/d" <(echo "$items") | \
                 grep --color=never $d | \
                 grep -o --color=never "<link>https://.*</link>" | \
                 sed -e "s|<link>\(.*\)</link>|\1|"`
            printf "Opening news item from $d\n"
            $BROWSER $URL
        fi
    done <<EOF
$article_dates
EOF
    rm $news
}

filter_log () {
    sed -e 's/\[.*\] //g'
}

display_messages () {
    msgs=`printf "$1\n" | grep ALPM-SCRIPTLET | sed -e '/warning: /d;s/\[.*\] //g'`
    if [ "x$msgs" != "x" ]; then
        printf "\nMessages:\n"
        printf "$msgs\n"
    fi
}

display_warnings () {
    warnings=`printf "$1\n" | grep --color=$COLOR warning:`
    if [ "x$warnings" != "x" ]; then
        printf "\nWarnings:\n"
        printf "$warnings\n" | filter_log
    fi
}
    
display_pacsaves () {
    pacsaves=`printf "$1\n" | grep --color=never warning: | grep --color=$COLOR -o "[-0-9_/a-z\.]*.pacsave"`
    if [ "x$pacsaves" != "x" ]; then
        printf "\nNew pacsave files:\n"
        printf "$pacsaves\n" | filter_log
    fi
}

display_pacnews () {
    pacnews=`printf "$1\n" | grep --color=never warning: | grep --color=$COLOR -o "[-0-9_/a-z\.]*.pacnew"`
    if [ "x$pacnews" != "x" ]; then
        printf "\nNew pacnew files:\n"
        printf "$pacnews\n" | filter_log
    fi
}

prompt_reboot () {
    if [ "x`printf "$1\n" | grep 'upgraded linux'`" != "x" ]; then
        printf "\nThe kernel was updated. Reboot now? (y/N)\n"
        read reboot_resp
        if [ "$reboot_resp" = "y" ]; then
            systemctl reboot
        fi
    fi
}

warn_on_force () {
    printf "You should only use the '--force' option if you absolutely know what\n"
    printf "you are doing (or if a dev told you to use it).  Are you sure you\n"
    printf "should be doing this? (Y/n)\n"
    read force_resp
    if [ "$force_resp" = "n" ]; then
        exit 0
    fi
}

case "$@" in
    *-Syu*) [[ $SHOW_NEWS = "true" ]] && show_news ;;
esac

case "$@" in
    *--force*) [[ $WARN_ON_FORCE = "true" ]] && warn_on_force ;;
esac

run_date=`date '+%Y-%m-%d %H:%M'`
$pacmanbin $@ 
# get /var/log/pacman.log from our starting time until the end
paclog=$(sed -n -e \
    "/\[$run_date\] \[PACMAN\] Running 'pacman.*'/,\${/.*/p}" \
    /var/log/pacman.log)

[[ $REPRINT_MESSAGES = "true" ]] && display_messages "$paclog"
[[ $REPRINT_WARNINGS = "true" ]] && display_warnings "$paclog"
[[ $LIST_PACSAVES = "true" ]] && display_pacsaves "$paclog"
[[ $LIST_PACNEWS = "true" ]] && display_pacnews "$paclog"
[[ $PROMPT_REBOOT = "true" ]] && prompt_reboot "$paclog"
